#include <iostream>
#include <time.h>
#include <conio.h>
#include "windows.h"


using namespace std;


enum eDir{STOP = 0, LEFT = 1, UPLEFT = 2, DOWNLEFT = 3, RIGHT = 4, UPRIGHT = 5, DOWNRIGHT = 6};

class cBall
{

    private:

        int x, y;
        int oX, oY;
        eDir direction;

    public:

        cBall(int posX, int posY)
        {
            oX = posX;
            oY = posY;
            x = posX;
            y = posY;
            direction = STOP;
        }


	void Reset()
	{
		x = oX;
		y = oY;
		direction = STOP;
	}


	void changeDirection(eDir d)
	{
		direction = d;
	}


	void randomDirection()

	{
		direction = (eDir)((rand() % 6) + 1);
	}


	inline int getX() { return x; };

	inline int getY() { return y; };

	inline eDir getDirection()
	{
        return direction;
    };

	void Move()
	{
		switch (direction)
		{
            case STOP:
                break;
            case LEFT:
                x --;
                break;
            case RIGHT:
                x ++;
                break;
            case UPLEFT:
                x --;
                y --;
                break;
            case DOWNLEFT:
                x --;
                y ++;
                break;
            case UPRIGHT:
                x ++;
                y --;
                break;
            case DOWNRIGHT:
                x ++;
                y ++;
                break;
            default:
                break;
		}
	}


	friend ostream& operator<<(ostream& o, cBall c)
	{
		o << "Ball [" << c.x << "," << c.y << "][" << c.direction << "]";
		return o;
	}
};


class cPaddle
{
    private:
        int x, y;
        int oX, oY;
    public:
        cPaddle()
        {
            x = y = 0;
        }

        cPaddle(int posX, int posY) : cPaddle()
        {
            oX = posX;
            oY = posY;
            x = posX;
            y = posY;
        }

	inline void Reset()
	{
        x = oX; y = oY;
    }
	inline int getX()
    {
        return x;
    }
	inline int getY()
	{
        return y;
    }
	inline void moveUp()
	{
        y--;
    }
	inline void moveDown()
	{
        y++;
    }
	friend ostream& operator<<(ostream& o, cPaddle c)
	{
		o << "Paddle [" << c.x << "," << c.y << "]";
		return o;
	}
};


class cGameManager
{
    private:
        int width, height;
        int poeni1, poeni2;
        char up1, down1, up2, down2;
        bool quit;
        cBall* ball;
        cPaddle* igrac1;
        cPaddle* igrac2;

    public:

        cGameManager(int w, int h)
        {
            srand(time(NULL));
            quit = false;
            up1 = 'w'; up2 = 'i';
            down1 = 's'; down2 = 'k';
            poeni1 = poeni2 = 0;
            width = w; height = h;
            ball = new cBall(w / 2, h / 2);
            igrac1 = new cPaddle(1, h / 2 - 3);
            igrac2 = new cPaddle(w - 2, h / 2 - 3);
        }

	~cGameManager()
	{
		delete ball, igrac1, igrac2;
	}

	void ScoreUP(cPaddle* player)
    {
		if (player == igrac1)
			poeni1++;
		else if (player == igrac2)
			poeni2++;

		ball -> Reset();
		igrac1 -> Reset();
		igrac2 -> Reset();
	}


	void Draw()
	{
		system("cls");
		for (int i = 0; i < width + 2; i ++)
			cout << "\xB2";
		cout << endl;

		for (int i = 0; i < height; i ++)
        {
			for (int j = 0; j < width; j ++)
			{
				int ballx = ball -> getX();
				int bally = ball -> getY();
				int igrac1x = igrac1 -> getX();
				int igrac1y = igrac1 -> getY();
				int igrac2x = igrac2 -> getX();
				int igrac2y = igrac2 -> getY();

				if (j == 0)
					cout << "\xB2";

				if (ballx == j && bally == i)
					cout << "O"; //lopta

				else if (igrac1x == j && igrac1y == i)
					cout << "\xDB"; //prvi igrac

				else if (igrac1x == j && igrac1y + 1 == i)
					cout << "\xDB"; //prvi igrac

				else if (igrac1x == j && igrac1y + 2 == i)
					cout << "\xDB"; //prvi igrac

				else if (igrac1x == j && igrac1y + 3 == i)
					cout << "\xDB"; //prvi igrac


				else if (igrac2x == j && igrac2y == i)
					cout << "\xDB"; //drugi igrac

				else if (igrac2x == j && igrac2y + 1 == i)
					cout << "\xDB"; //prvi igrac

				else if (igrac2x == j && igrac2y + 2 == i)
					cout << "\xDB"; //prvi igrac

				else if (igrac2x == j && igrac2y + 3 == i)
					cout << "\xDB"; //prvi igrac

				else
					cout << " ";

				if (j == width - 1)
					cout << "\xB2";
			}

			cout << endl;
		}

		for (int i = 0; i < width + 2; i ++)
			cout << "\xB2";
		cout << endl;

		cout << "POENI 1: " << poeni1 << endl << "POENI 2: " << poeni2 << endl;
	}

	void Input()
	{
		ball->Move();

		int ballx = ball -> getX();
		int bally = ball -> getY();
		int igrac1x = igrac1 -> getX();
		int igrac1y = igrac1 -> getY();
		int igrac2x = igrac2 -> getX();
		int igrac2y = igrac2 -> getY();

		if (_kbhit())
		{
			char current = _getch();
			if (current == up1)
				if (igrac1y > 0)
					igrac1 -> moveUp();
			if (current == down1)
				if (igrac1y + 4 < height)
					igrac1 -> moveDown();
			if (current == up2)
				if (igrac2y > 0)
					igrac2 -> moveUp();
			if (current == down2)
				if (igrac2y + 4 < height)
					igrac2 -> moveDown();

			if (ball -> getDirection() == STOP)
				ball -> randomDirection();

			if (current == 'q')
				quit = true;
		}
	}


	void Logic()
	{
		int ballx = ball -> getX();
		int bally = ball -> getY();
		int igrac1x = igrac1 -> getX();
		int igrac1y = igrac1 -> getY();
		int igrac2x = igrac2 -> getX();
		int igrac2y = igrac2 -> getY();


		//leva strana

		for (int i = 0; i < 4; i ++)
			if (ballx == igrac1x + 1)
				if (bally == igrac1y + i)
                    ball -> changeDirection((eDir)((rand() % 3) + 4));


		//desna strana
		for (int i = 0; i < 4; i ++)
			if (ballx == igrac2x - 1)
				if (bally == igrac2y + i)
					ball -> changeDirection((eDir)((rand() % 3) + 1));

		//donji zid
		if (bally == height - 1)
			ball -> changeDirection(ball -> getDirection() == DOWNRIGHT ? UPRIGHT : UPLEFT);

		//gornji zid
		if (bally == 0)
			ball -> changeDirection(ball -> getDirection() == UPRIGHT ? DOWNRIGHT : DOWNLEFT);

		//desni zid
		if (ballx == width - 1)
			ScoreUP(igrac1);

		//levi zid
		if (ballx == 0)
			ScoreUP(igrac2);
	}


	void Run()
	{
		while (!quit){
			Draw();
			Input();
			Logic();
			Sleep(50);

		}
	}
};




int main()
{
	cGameManager c(40, 20);
	c.Run();

	return 0;
}
