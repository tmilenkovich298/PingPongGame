#include <iostream>
#include <list>
#include <algorithm>

using namespace std;

int main()
{
    int n;
    cout << "Unesite dimenziju mape :" << endl;
    cin >> n;
    int* m = (int*) malloc(sizeof(int) * n * n); 
    if (m == nullptr) 
        return 1;
    cout << "Sada unosite polja mape (po redovima): " << endl;
    for(int i = 0;i < n;i++)
        for(int j = 0; j < n;j++)
            cin >> m[i*n+j];
    list<int> tekuci;
    list<int> za_obradu;
    int ukupan_broj_ostrva = 0;
    while (true)
    {
        bool nadjeno = false;
        int i, j;
        for (i = 0; i < n; i++)
        {
            for (j = 0; j < n; j++)
            {
                if (m[i*n + j] == 1)
                {
                    nadjeno = true;
                    tekuci.push_back(i*n + j); 
                    za_obradu.push_back(i*n + j);
                    ukupan_broj_ostrva++;
                    break;
                }
            }
         if (nadjeno)
             break;
        }
        if (!nadjeno) 
            break;
        while (!za_obradu.empty())
        {
            int tekuce_polje = za_obradu.front();
            za_obradu.pop_front();
            int i_te = tekuce_polje / n;
            int j_te = tekuce_polje % n;
            
            if (j_te > 0 && m[i_te * n + j_te - 1] == 1 && find(tekuci.begin(), tekuci.end(), (i_te * n + j_te - 1)) == tekuci.end())
            {
                tekuci.push_back(i_te * n + j_te - 1);
                za_obradu.push_back(i_te * n + j_te - 1);
            }
            if (j_te < n-1 && m[i_te * n + j_te + 1] == 1 && find(tekuci.begin(), tekuci.end(), (i_te * n + j_te + 1)) == tekuci.end())
            {
                tekuci.push_back(i_te * n + j_te + 1);
                za_obradu.push_back(i_te * n + j_te + 1);
            }
            if (i_te > 0 && m[(i_te - 1) * n + j_te] == 1 && find(tekuci.begin(), tekuci.end(), ((i_te - 1) * n + j_te)) == tekuci.end())
            {
                tekuci.push_back((i_te - 1) * n + j_te);
                za_obradu.push_back((i_te - 1) * n + j_te);
            }
            if (i_te < n-1 && m[(i_te + 1) * n + j_te] == 1 && find(tekuci.begin(), tekuci.end(), ((i_te + 1) * n + j_te)) == tekuci.end())
            {
                tekuci.push_back((i_te + 1) * n + j_te);
                za_obradu.push_back((i_te + 1) * n + j_te);
            }
        }
        while(!tekuci.empty())
        {
            int tekuce_polje = tekuci.front();
            tekuci.pop_front();
            
            m[tekuce_polje] = 0;
        }
    }  
    cout << "Broj ostrva je " << ukupan_broj_ostrva << endl;
    free(m);
    return 0;
}
